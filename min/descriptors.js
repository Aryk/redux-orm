"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _defineProperty(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function forwardManyToOneDescriptor(e,r){return{get:function(){var t=this._fields[e];return"undefined"!=typeof t?r.withId(t):void 0},set:function(t){var n=this.getId(),o=void 0;o=t instanceof r?t.getId():t,this.getClass().addMutation({type:_constants2["default"],payload:{idArr:[n],updater:_defineProperty({},e,o)}})}}}function backwardOneToOneDescriptor(e,r){return{get:function(){var t=this.getId();return r.get(_defineProperty({},e,t))},set:function(){throw new Error("Can't mutate a reverse one-to-one relation.")}}}function backwardManyToOneDescriptor(e,r){return{get:function(){var t=this.getId();return r.filter(_defineProperty({},e,t))},set:function(){throw new Error("Can't mutate a reverse many-to-one relation.")}}}function manyToManyDescriptor(e,r,t,n){return{get:function(){var o=this.getId(),a=(0,_utils.m2mFromFieldName)(e.getName()),i=(0,_utils.m2mToFieldName)(r.getName()),s={};n?s[i]=o:s[a]=o;var u=t.filter(s),d={};u.plain.objects().forEach(function(e){var r=e[n?a:i];"undefined"!=typeof r&&(d[r]=!0)});var c=Object.keys(d),f=n?e:r,p=f.getQuerySetFromIds(c);return p.add=function(){for(var e=arguments.length,r=Array(e),n=0;e>n;n++)r[n]=arguments[n];var s=r.map(function(e){return Number.isInteger(e)?e:e.getId()});s.forEach(function(e){var r;t.create((r={},_defineProperty(r,a,o),_defineProperty(r,i,e),r))})},p.remove=function(){for(var e=void 0,r=arguments.length,n=Array(r),s=0;r>s;s++)n[s]=arguments[s];e=Number.isInteger(n[0])?n:n.map(function(e){return e.getId()});var u=t.filter(function(r){return r[a]===o&&e.includes(r[i])?!0:!1});u["delete"]()},p},set:function(){throw new Error("Tried setting a M2M field. Please use the related QuerySet methods add and remove.")}}}Object.defineProperty(exports,"__esModule",{value:!0});var _constants=require("./constants"),_constants2=_interopRequireDefault(_constants),_utils=require("./utils"),forwardOneToOneDescriptor=forwardManyToOneDescriptor;exports.forwardManyToOneDescriptor=forwardManyToOneDescriptor,exports.forwardOneToOneDescriptor=forwardOneToOneDescriptor,exports.backwardOneToOneDescriptor=backwardOneToOneDescriptor,exports.backwardManyToOneDescriptor=backwardManyToOneDescriptor,exports.manyToManyDescriptor=manyToManyDescriptor;